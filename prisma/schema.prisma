generator client {
  provider = "prisma-client-js"
}


// prisma/schema.prisma

datasource db {
  provider   = "postgresql"
  // Pooled connection for your running app (goes through PgBouncer on port 6543)
  url        = env("DATABASE_URL")
  // Direct connection for migrations & prisma studio (5432)
  directUrl  = env("DATABASE_DIRECT_URL")
}




enum Role {
  USER
  ADMIN
}

enum AuditAction {
  USER_CREATED
  SUBSCRIPTION_TOGGLED
  FILE_UPLOADED
  FILE_ASSIGNED
  APIKEY_CREATED
  APIKEY_REVOKED
  DOWNLOAD_GRANTED
  SUPPORT_TICKET
}

enum AccountStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

model User {
  id                 String        @id @default(cuid())
  name               String
  email              String        @unique
  passwordHash       String
  role               Role          @default(USER)
  subscriptionActive Boolean       @default(false)
  status             AccountStatus @default(PENDING)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  // Relations
  uploads          File[]           @relation("UserUploads")
  assignments      FileAssignment[] @relation("UserAssignments")
  assignmentsGiven FileAssignment[] @relation("AssignmentsAssignedBy")
  auditLogs        AuditLog[]       @relation("AuditActor") // ðŸ‘ˆ add this
}

model File {
  id           String   @id @default(cuid())
  title        String
  originalName String?
  url          String? // for external or pre-signed location (weâ€™ll wire actual uploads next day)
  mime         String?
  size         Int?
  uploadedBy   User?    @relation("UserUploads", fields: [uploadedById], references: [id])
  uploadedById String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Assignments
  assignments FileAssignment[]

  @@index([uploadedById])
  @@index([createdAt])
}

model FileAssignment {
  id           String   @id @default(cuid())
  file         File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId       String
  user         User     @relation("UserAssignments", fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  assignedBy   User     @relation("AssignmentsAssignedBy", fields: [assignedById], references: [id])
  assignedById String
  note         String?
  createdAt    DateTime @default(now())

  @@unique([fileId, userId]) // prevent double-assigning the same file to same user
  @@index([userId, createdAt])
  @@index([assignedById])
}

model ApiKey {
  id         String    @id @default(cuid())
  label      String
  keyHash    String
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime?
}

model AuditLog {
  id        String      @id @default(cuid())
  actorId   String?
  actor     User?       @relation("AuditActor", fields: [actorId], references: [id])
  action    AuditAction
  targetId  String?
  target    String?
  meta      Json?
  createdAt DateTime    @default(now())

  @@index([actorId]) // optional
}
